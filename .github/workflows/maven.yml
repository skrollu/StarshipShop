# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
    push:
        branches: [main, sonar]
    pull_request:
        branches: [main, sonar]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Step 1 - Checkout branch
              uses: actions/checkout@v3
            - name: Step 2 - Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: "17"
                  distribution: "temurin"
                  cache: maven
            - name: Step 3 - Build with Maven
              run: mvn -B package -Pdev -DskipTests
    test:
        needs: build
        runs-on: ubuntu-latest
        env:
          DB_STARSHIP_SERVICE: starship_service_test
          DB_ORDER_SERVICE: order_service_test
          DB_INVENTORY_SERVICE: inventory_service_test
          DB_CART_SERVICE: cart_service_test
          DB_IMAGE_SERVICE: image_service_test
          DB_PRODUCT_SERVICE: product_service_test
          DB_USER: root
          DB_PASSWORD: root

        # Service containers to run with `test` job
        services:
          # Label used to access the service container
          postgresql:
            image: postgres
            env:
              POSTGRES_USER: root
              POSTGRES_PASSWORD: root
              POSTGRES_DB: bitnami_keycloak
            # Set health checks to wait until postgres has started
            options: >-
              --health-cmd pg_isready
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5

        steps:
            - name: Step 1 - Checkout branch
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
            - name: Step 2 - Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: "17"
                  distribution: "temurin"
                  cache: maven
            - name: Step 3 - Cache SonarCloud packages
              uses: actions/cache@v1
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar
            - name: Step 4 - Cache Maven packages
              uses: actions/cache@v1
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2
            # MySQL 5.7 is pre-installed on Ubuntu 18.04 containers (and MySQL 8 on 20 and latest) No Service section is needed
            # Github official announcement: https://github.blog/changelog/2020-02-21-github-actions-breaking-change-ubuntu-virtual-environments-will-no-longer-start-the-mysql-service-automatically/
            - name: Step 5 - Set up MySQL
              run: |
                  sudo /etc/init.d/mysql start
                  mysql -e 'CREATE DATABASE ${{ env.DB_STARSHIP_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_ORDER_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_INVENTORY_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_PRODUCT_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_CART_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_IMAGE_SERVICE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
            - name: Step 6 - Run config-server in background
              # Copy service file, incase if there are any changes
              # reload configurations incase if service file has changed
              # restart the service
              # start of VM restart
              run: |
                cd config-server
                sudo cp config-server.service /etc/systemd/system/config-server.service
                sudo systemctl daemon-reload
                sudo systemctl restart config-server
                sudo systemctl enable config-server
            - name: Step 7 - Run Keycloak container
              run: docker run --name keycloak -d -e KEYCLOAK_ADMIN_USER=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -e KEYCLOAK_DATABASE_USER=root -e KEYCLOAK_DATABASE_PASSWORD=root -e KEYCLOAK_IMPORT=/config/starshipshop-realm-export.json -e KC_HEALTH_ENABLED=true -p 8181:8080 -v ${{ github.workspace }}/realms:/config bitnami/keycloak:latest
            - name: Step 8 - Wait for Keycloak to be up and running
              run: docker exec keycloak /bin/bash -c 'until curl http://localhost:8181/health; do sleep 5; done'
#            - name: Step 7 - Setup keycloak to be able to run integration tests
#              uses: docker://bitnami/keycloak:latest
#              with:
#                env: |
#                  KEYCLOAK_ADMIN_USER=admin
#                  KEYCLOAK_ADMIN_PASSWORD=admin
#                  KEYCLOAK_IMPORT=/config/starshipshop-realm-export.json
#                  KEYCLOAK_DATABASE_USER=root
#                  KEYCLOAK_DATABASE_PASSWORD=root
#                ports: |
#                  8181:8080
#                volumes: |
#                  ${{ github.workspace }}/realms:/config
            - name: Step 9 - Run tests with Maven and analyze with sonarcloud
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=skrollu_StarshipShop
